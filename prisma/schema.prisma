// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Add these for better performance
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  password          String?             // Optional if using OAuth
  username          String?             // Username can be derived from full name
  name              String              // Full name
  profileImg        String?             // Profile image URL
  emailVerified     DateTime?           // Required for NextAuth
  age               Int?                // Optional field from questionnaire
  gender            String?             // Optional field from questionnaire
  profileCompleted  Boolean             @default(false) // Track if user completed the questionnaire
  createdAt         DateTime            @default(now())
  lastLogin         DateTime?
  timezone          String?             @default("UTC")
  deviceType        String?             // mobile, tablet, desktop
  userSubscriptions UserSubscription[]

  //admin
  role      String    @default("user") // Options: "user", "admin"
  
  // NextAuth relations
  accounts          Account[]
  sessions          Session[]
  
  // 2FA related relations
  twoFactorAuth     TwoFactorAuth?
  otpVerifications  OTPVerification[]
  testAttempts      TestAttempt[]

  // Add these new fields
  avatarChoice      String? // Reference to selected avatar image
  communityTermsAccepted Boolean @default(false)
  
  // Add these new relations
  communityThreads   CommunityThread[]
  communityMessages  CommunityMessage[]
  threadUpvotes    ThreadUpvote[]
  messageUpvotes     MessageUpvote[]
  messageReports     MessageReport[]
}

// NextAuth.js required models
model Account {
  id                 String    @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TwoFactorAuth {
  id              String    @id @default(cuid())
  userId          Int       @unique
  secret          String?   // For TOTP-based auth (not needed for email OTP)
  verified        Boolean   @default(false)
  enabled         Boolean   @default(false)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OTPVerification {
  id              String    @id @default(cuid())
  userId          Int
  token           String    // The OTP code sent to the user
  expires         DateTime  // When the OTP expires
  verified        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  deviceInfo      String?   @db.Text // Store device/browser info
  ipAddress       String?   // Store IP address for location check
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Aircraft {
  id            Int             @id @default(autoincrement())
  name          String          // Boeing-737-max, Airbus-A320, etc.
  slug          String          @unique // e.g., "boeing-737-max"
  tests         Test[]
  titles        Title[]
}

model TestType {
  id        Int     @id @default(autoincrement())
  type      String  @unique // mock or practice
  slug      String  @unique // e.g., "mock", "practice"
  titles    Title[]
}

model Title {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    // e.g., "0-limitations"
  aircraftId  Int
  aircraft    Aircraft  @relation(fields: [aircraftId], references: [id])
  testTypeId  Int
  testType    TestType  @relation(fields: [testTypeId], references: [id])
  tests       Test[]    // One title can have multiple tests (versions)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([slug, aircraftId, testTypeId])
}

model Test {
  id             Int           @id @default(autoincrement())
  title          String
  titleId        Int?          // Optional link to Title model
  titleRef       Title?        @relation(fields: [titleId], references: [id])
  aircraftId     Int
  aircraft       Aircraft      @relation(fields: [aircraftId], references: [id])
  questions      Question[]
  totalQuestions Int
  timeLimit      Int?          // in minutes, nullable for practice tests
  updatedBy      Int           // admin user ID
  isActive       Boolean       @default(true) // Only one active test per title
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  testAttempts   TestAttempt[]
}

model Question {
  id              Int               @id @default(autoincrement())
  testId          Int
  test            Test              @relation(fields: [testId], references: [id], onDelete: Cascade)
  questionNumber  Int               // Position/order in the test
  questionText    String            @db.Text
  correctAnswer   String            // A, B, C, D
  explanation     String?           @db.Text
  options         Option[]
  responses       QuestionResponse[]

  @@index([testId])
}

model Option {
  id           Int      @id @default(autoincrement())
  questionId   Int
  question     Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  optionText   String   @db.Text
  isCorrect    Boolean
  label        String   // A, B, C, D

  @@index([questionId])
}

model TestAttempt {
  id                Int                 @id @default(autoincrement())
  userId            Int
  user              User                @relation(fields: [userId], references: [id])
  testId            Int
  test              Test                @relation(fields: [testId], references: [id])
  startedAt         DateTime            @default(now())
  completedAt       DateTime?
  testSnapshot      Json?               // Optional snapshot of test at time of attempt
  score             Float?              // Percentage score
  timeTaken         Int?                // in seconds
  passFail          Boolean?
  status            String              @default("in_progress") // in_progress, completed, abandoned
  questionResponses QuestionResponse[]
  // Analytics fields
  attemptNumber     Int                 // 1st attempt, 2nd attempt, etc.
  deviceType        String?             // mobile, tablet, desktop
  browserInfo       String?
  ipLocation        String?             // City/Country

  @@index([userId, testId])
  @@index([status])
}

model QuestionResponse {
  id            Int         @id @default(autoincrement())
  testAttemptId Int
  testAttempt   TestAttempt @relation(fields: [testAttemptId], references: [id], onDelete: Cascade)
  questionId    Int
  question      Question    @relation(fields: [questionId], references: [id])
  userAnswer    String?     // User selected option (A, B, C, D)
  isCorrect     Boolean?
  timeTaken     Int?        // in seconds
  answeredAt    DateTime    @default(now())
  sequenceNumber Int        // Position in the test

  @@index([testAttemptId])
  @@index([questionId])
}

model AdminUser {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  name              String
  password          String
  role              String              @default("admin") // admin, super_admin
  createdAt         DateTime            @default(now())
  lastLogin         DateTime?
  activityLogs      AdminActivityLog[]
  testChanges       TestChangeLog[]
}

model AdminActivityLog {
  id         Int       @id @default(autoincrement())
  adminId    Int
  admin      AdminUser @relation(fields: [adminId], references: [id])
  action     String    // e.g., "update_test", "delete_test"
  entityType String    // e.g., "test", "user", "subscription"
  entityId   Int
  details    Json?
  timestamp  DateTime  @default(now())

  @@index([adminId])
  @@index([entityType, entityId])
}

model TestChangeLog {
  id              Int       @id @default(autoincrement())
  testId          Int
  changedBy       Int       // admin ID
  admin           AdminUser @relation(fields: [changedBy], references: [id])
  changeDate      DateTime  @default(now())
  changeType      String    // "created", "updated", "deleted"
  previousContent Json?     // Optional backup of previous content

  @@index([testId])
  @@index([changedBy])
}

// Community Chat Models
model CommunityThread {
  id          Int                 @id @default(autoincrement())
  title       String
  content     String              @db.Text
  userId      Int
  user        User                @relation(fields: [userId], references: [id])
  isDeleted   Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  replyCount  Int                 @default(0)
  replies     CommunityMessage[]

  upvotes     ThreadUpvote[]
  upvoteCount Int             @default(0)

  @@index([userId])
  @@index([createdAt])
}

model CommunityMessage {
  id            Int                 @id @default(autoincrement())
  content       String              @db.Text
  userId        Int
  user          User                @relation(fields: [userId], references: [id])
  threadId      Int?
  thread        CommunityThread?    @relation(fields: [threadId], references: [id], onDelete: Cascade)
  parentId      Int?
  parentMessage CommunityMessage?   @relation("Replies", fields: [parentId], references: [id], onDelete: Cascade)
  replies       CommunityMessage[]  @relation("Replies")
  isDeleted     Boolean             @default(false)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  upvoteCount   Int                 @default(0)
  upvotes       MessageUpvote[]
  reports       MessageReport[]

  @@index([threadId])
  @@index([parentId])
  @@index([createdAt])
  @@index([userId])
}

model ThreadUpvote {
  id          Int              @id @default(autoincrement())
  threadId    Int
  thread      CommunityThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  userId      Int
  user        User             @relation(fields: [userId], references: [id])
  createdAt   DateTime         @default(now())

  @@unique([threadId, userId]) // Prevent duplicate votes
  @@index([userId])
}

model MessageUpvote {
  id          Int               @id @default(autoincrement())
  messageId   Int
  message     CommunityMessage  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId      Int
  user        User              @relation(fields: [userId], references: [id])
  createdAt   DateTime          @default(now())

  @@unique([messageId, userId]) // Prevent duplicate votes
  @@index([userId])
}

model MessageReport {
  id          Int               @id @default(autoincrement())
  messageId   Int
  message     CommunityMessage  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  reporterId  Int
  reporter    User              @relation(fields: [reporterId], references: [id])
  reason      String            // Report category
  details     String?           @db.Text // Optional additional details
  status      String            @default("pending") // pending, reviewed, dismissed, actioned
  resolution  String?           // Action taken if any
  createdAt   DateTime          @default(now())
  resolvedAt  DateTime?         // When the report was handled

  @@index([messageId])
  @@index([reporterId])
  @@index([status])
}

// Defines available subscription plans
model SubscriptionPlan {
  id           Int               @id @default(autoincrement())
  name         String            // Internal name (e.g., "boeing-737-max")
  displayName  String            // User-facing name (e.g., "Boeing 737 MAX Complete Course")
  description  String?           // Detailed description
  moduleType   String            // "aircraft" or "subject"
  moduleId     Int               // Reference to the corresponding module
  priceMonthly Decimal           @db.Decimal(10, 2)
  priceYearly  Decimal           @db.Decimal(10, 2)
  isActive     Boolean           @default(true)
  features     Json?             // Array of included features
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  userSubscriptions UserSubscription[]
}

// Tracks user subscriptions
model UserSubscription {
  id                Int             @id @default(autoincrement())
  userId            Int
  user              User            @relation(fields: [userId], references: [id])
  planId            Int
  plan              SubscriptionPlan @relation(fields: [planId], references: [id])
  startDate         DateTime        @default(now())
  endDate           DateTime
  status            String          // "active", "cancelled", "expired"
  paymentReference  String?         // For Razorpay reference
  lastBillingDate   DateTime?
  nextBillingDate   DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([endDate])
}